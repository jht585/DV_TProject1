require("ggplot2")
"Displaying the top few rows of a dataframe:"
head(diamonds)
"Summary of each variable in the dataframe."
names(diamonds)
?diamonds
summary(diamonds)
"Selecting a subset of columns from a dataframe:"
head(subset(diamonds, select = c(carat, cut)))
head(subset(diamonds, cut == "Ideal" & price > 5000),30)
head(subset(diamonds, select = c(carat, cut)),30)
head(subset(diamonds, cut == "Ideal" & price > 5000))
"Find average price group by color (plyr package is needed)"
require("plyr")
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=mean(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=max(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=mean(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=min(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=median(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=mean(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, ~clarity, summarise, o=mean(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color~clarity, summarise, o=mean(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~(color, clarity), summarise, o=mean(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color~clarity, summarise, o=mean(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=mean(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color~cut, summarise, o=mean(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=mean(price, na.rm = TRUE))
head(subset(diamonds, select = c(carat, cut)))
"Selecting a subset of rows from a dataframe:"
head(subset(diamonds, cut == "Ideal" & price > 5000))
"Find average price group by color (plyr package is needed)"
require("plyr")
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=mean(price, na.rm = TRUE))
library("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp order by job"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
df
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp order by job"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
View(df)
df
source('~/DataVisualization/DrCannata/RWorkshop/02 RESTful Data Acces/Access Oracle Database.R')
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp order by job"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_cjs2599', PASS='orcl_cjs2599', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
df
?ggplot
ggplot(df, aes(x=empno, y=salary, color=variable)) + geom_line()
ggplot(df, aes(x=EMPNO, y=SALARY, color=variable)) + geom_line()
ggplot(df, aes(x=EMPNO, y=SALARY, color=variable)) + geom_line()
ggplot(df, aes(x=EMPNO, y=SAL, color=JOB)) + geom_line()
source('~/DataVisualization/DrCannata/RWorkshop/03 Grammar of Graphics with R & ggplot2/Grammar Examples.R')
source('~/DataVisualization/DrCannata/RWorkshop/03 Grammar of Graphics with R & ggplot2/Grammar Examples.R')
source('~/DataVisualization/DrCannata/RWorkshop/03 Grammar of Graphics with R & ggplot2/Grammar Examples.R', echo=TRUE)
source('~/DataVisualization/DrCannata/RWorkshop/03 Grammar of Graphics with R & ggplot2/Grammar Examples.R', echo=TRUE)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic where sex is not null"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
head(df)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DrCannata/RWorkshop/03 Grammar of Graphics with R & ggplot2/Titanic Analysis.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
summary(df)
head(df)
require("jsonlite")
require("RCurl")
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic where sex is not null"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_cjs2599', PASS='orcl_cjs2599', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DrCannata/RWorkshop/03 Grammar of Graphics with R & ggplot2/Titanic Analysis.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DV_Project1/01 Data/DataframeMain.R', echo=TRUE)
source('~/DataVisualization/DrCannata/RWorkshop/03 Grammar of Graphics with R & ggplot2/Titanic Analysis.R', echo=TRUE)
require("ggplot2")
require("jsonlite")
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select age, sex, pclass, parch, survived from titanic where not (age is null or sex is null or pclass is null or parch is null or survived is null) and age < 50 and age > 15"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_cjs2599', PASS='orcl_cjs2599', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(df)
head(df)
p6 <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
facet_grid(~PARCH~PCLASS, labeller=label_both) +
labs(title="SURVIVAL AND FAMILY SIZE") +
labs(x="SURVIVED", y=paste("SEX")) +
layer(data=df,
mapping=aes(x=as.character(SURVIVED), y=SEX, color=AGE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.3, height=0.3)
)
plot(p6)
require("ggplot2")
require("jsonlite")
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select age, sex, pclass, parch, survived from titanic where not (age is null or sex is null or pclass is null or parch is null or survived is null) and age < 50 and age > 15"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_cjs2599', PASS='orcl_cjs2599', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(df)
head(df)
require("ggplot2")
require("jsonlite")
require("RCurl")
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select age, sex, pclass, parch, survived from titanic where not (age is null or sex is null or pclass is null or parch is null or survived is null) and age < 50 and age > 15"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_cjs2599', PASS='orcl_cjs2599', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(df)
head(df)
p6 <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
facet_grid(~PARCH~PCLASS, labeller=label_both) +
labs(title="SURVIVAL AND FAMILY SIZE") +
labs(x="SURVIVED", y=paste("SEX")) +
layer(data=df,
mapping=aes(x=as.character(SURVIVED), y=SEX, color=AGE),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.3, height=0.3)
)
plot(p6)
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
# These will be made to more resemble Tableau Parameters when we study Shiny.
KPI_Low_Max_value = 4750
KPI_Medium_Max_value = 5000
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, clarity, sum_price, round(sum_carat) as sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'03 Low\\\'
when kpi < "p2" then \\\'02 Medium\\\'
else \\\'01 High\\\'
end kpi
from (select color, clarity,
sum(price) sum_price, sum(carat) sum_carat,
sum(price) / sum(carat) kpi
from diamonds
group by color, clarity)
order by clarity;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
# df <- diamonds %>% group_by(color, clarity) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, '03 Low', ifelse(ratio <= KPI_Medium_Max_value, '02 Medium', '01 High'))) %>% rename(COLOR=color, CLARITY=clarity, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
spread(df, COLOR, SUM_PRICE) %>% View
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Diamonds Crosstab\nSUM_PRICE, SUM_CARAT, SUM_PRICE / SUM_CARAT') +
labs(x=paste("COLOR"), y=paste("CLARITY")) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_PRICE),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_CARAT),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)
# The following is equivalent to Windowing Story 5 Sheet 4 in "Crosstabs, KPIs, Barchart.twb"
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, clarity, avg_price,
avg(avg_price)
OVER (PARTITION BY clarity ) as window_avg_price
from (select color, clarity, avg(price) avg_price
from diamonds
group by color, clarity)
order by clarity;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
# df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price)) %>% rename(COLOR=color, CLARITY=clarity)
# df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE))
# df <- inner_join(df, df1, by="CLARITY")
spread(df, COLOR, AVG_PRICE) %>% View
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_wrap(~CLARITY, ncol=1) +
labs(title='Diamonds Crosstab') +
labs(x=paste("COLOR"), y=paste("AVG_PRICE")) +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE),
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue"),
position=position_identity()
) + coord_flip() +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE, label=round(AVG_PRICE)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-0.5),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE, label=round(WINDOW_AVG_PRICE)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-2),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE, label=round(AVG_PRICE - WINDOW_AVG_PRICE)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-5),
position=position_identity()
) +
layer(data=df,
mapping=aes(yintercept = WINDOW_AVG_PRICE),
geom="hline",
geom_params=list(colour="red")
)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("~/DataVisualization/DV_TProject1/csv")
file_path <- "Yearly_Pop_By_Country.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("X1960",
"X1961",
"X1962",
"X1963",
"X1964",
"X1965",
"X1966",
"X1967",
"X1968",
"X1969",
"X1970",
"X1971",
"X1972",
"X1973",
"X1974",
"X1975",
"X1976",
"X1977",
"X1978",
"X1979",
"X1980",
"X1981",
"X1982",
"X1983",
"X1984",
"X1985",
"X1986",
"X1987",
"X1988",
"X1989",
"X1990",
"X1991",
"X1992",
"X1993",
"X1994",
"X1995",
"X1996",
"X1997",
"X1998",
"X1999",
"X2000",
"X2001",
"X2002",
"X2003",
"X2004",
"X2005",
"X2006",
"X2007",
"X2008",
"X2009",
"X2010",
"X2011",
"X2012",
"X2013",
"X2014")
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
source('~/DataVisualization/DV_RProject3/01 Data/Country_Pop_Ref_ETL.R')
source('~/DataVisualization/DV_RProject3/01 Data/Country_Pop_Ref_ETL.R')
source('~/DataVisualization/DV_RProject3/01 Data/Country_Pop_Ref_ETL.R')
source('~/DataVisualization/DV_RProject3/01 Data/Country_Pop_Ref_ETL.R')
source('~/DataVisualization/DV_RProject3/01 Data/Country_Pop_Ref_ETL.R')
